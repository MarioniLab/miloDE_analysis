table(modules_wgcna$cluster)
table(modules_wgcna$cluster[modules_wgcna$gene %in% genes_2_check])
plots = lapply(sort(unique(modules_wgcna$cluster)) , function(cluster){
genes = modules_wgcna$gene[modules_wgcna$cluster == cluster]
p = plot_DE_gene_set(sce_milo , de_stat = de_stat , genes = genes)
print(p)
})
saveRDS(sce_milo  , file = paste0(root.dir , "data/processed/chimera_tal1/sce_milo_blood_lineage.Rds"))
saveRDS(modules_wgcna  , file = paste0(root.dir , "data/processed/chimera_tal1/gene_modules_scwgcna.Rds"))
tab = sort(table(modules_wgcna$cluster) , decreasing = T)
tab
tab = sort(table(modules_wgcna$cluster) , decreasing = T)
tab = data.frame(cluster = c(1:length(tab)) , cluster_old = names(tab))
colnames(modules_wgcna)[colnames(modules_wgcna) == "cluster"] = "cluster_old"
modules_wgcna = merge(modules_wgcna , tab , all.x = T)
head(modules_wgcna)
dim()
dim(modules_wgcna)
head(modules_wgcna)
head(de_stat_per_gene)
modules_wgcna = merge(modules_wgcna, de_stat_per_gene, by = "gene" , all.x = T , all.y = F)
head(modules_wgcna)
saveRDS(modules_wgcna  , file = paste0(root.dir , "data/processed/chimera_tal1/gene_modules_scwgcna.Rds"))
cols_modules = MetBrewer::met.brewer("Homer2" , n = length(unique(modules_wgcna$cluster)))
cols_modules
head(modules_wgcna)
n_hoods_total = ncol(nhoods(sce_milo))
n_hoods_total
n_hoods_total = ncol(nhoods(sce_milo))
cols_modules = MetBrewer::met.brewer("Homer2" , n = length(unique(modules_wgcna$cluster)))
tab = as.data.frame(table(modules_wgcna$cluster))
colnames(tab) = c("module" , "n_genes")
p1 = ggplot(tab , aes(x = factor(module) , y = n_genes , fill = factor(module))) +
geom_bar(stat = "identity" , position = "dodge") +
theme_bw() +
scale_fill_manual(values = cols_modules) +
theme(legend.position = "none") +
labs(x = "Gene module" , y = "Number of genes")
p2 = ggplot(gene_clusters_scwgcna , aes(x = factor(cluster) , y = n_hoods_sig/n_hoods_total, col = factor(cluster) )) +
geom_boxplot() + geom_jitter(width = 0.1 , size = .75) +
theme_bw() +
theme(legend.position = "none") +
labs(x = "Gene module" , y = "Fraction of \n significant hoods") +
scale_color_manual(values = cols_modules)
n_hoods_total = ncol(nhoods(sce_milo))
cols_modules = MetBrewer::met.brewer("Homer2" , n = length(unique(modules_wgcna$cluster)))
tab = as.data.frame(table(modules_wgcna$cluster))
colnames(tab) = c("module" , "n_genes")
p1 = ggplot(tab , aes(x = factor(module) , y = n_genes , fill = factor(module))) +
geom_bar(stat = "identity" , position = "dodge") +
theme_bw() +
scale_fill_manual(values = cols_modules) +
theme(legend.position = "none") +
labs(x = "Gene module" , y = "Number of genes")
p2 = ggplot(modules_wgcna , aes(x = factor(cluster) , y = n_hoods_sig/n_hoods_total, col = factor(cluster) )) +
geom_boxplot() + geom_jitter(width = 0.1 , size = .75) +
theme_bw() +
theme(legend.position = "none") +
labs(x = "Gene module" , y = "Fraction of \n significant hoods") +
scale_color_manual(values = cols_modules)
p3 = ggplot(modules_wgcna , aes(x = factor(cluster) , y = corr_w_dist , col = factor(cluster) )) +
geom_boxplot() + geom_jitter(width = 0.1 , size = .75) +
theme_bw() +
theme(legend.position = "none") +
labs(x = "Gene module" , y = "Corr w/ distance to \n blood progenitors") +
scale_color_manual(values = cols_modules)
p = ggarrange(p1,p2,p3, ncol = 3)
p
figures.die
figures.dir
n_hoods_total = ncol(nhoods(sce_milo))
cols_modules = MetBrewer::met.brewer("Homer2" , n = length(unique(modules_wgcna$cluster)))
tab = as.data.frame(table(modules_wgcna$cluster))
colnames(tab) = c("module" , "n_genes")
p1 = ggplot(tab , aes(x = factor(module) , y = n_genes , fill = factor(module))) +
geom_bar(stat = "identity" , position = "dodge") +
theme_bw() +
scale_fill_manual(values = cols_modules) +
theme(legend.position = "none") +
labs(x = "Gene module" , y = "Number of genes")
p2 = ggplot(modules_wgcna , aes(x = factor(cluster) , y = n_hoods_sig/n_hoods_total, col = factor(cluster) )) +
geom_boxplot() + geom_jitter(width = 0.1 , size = .75) +
theme_bw() +
theme(legend.position = "none") +
labs(x = "Gene module" , y = "Fraction of \n significant hoods") +
scale_color_manual(values = cols_modules)
p3 = ggplot(modules_wgcna , aes(x = factor(cluster) , y = corr_w_dist , col = factor(cluster) )) +
geom_boxplot() + geom_jitter(width = 0.1 , size = .75) +
theme_bw() +
theme(legend.position = "none") +
labs(x = "Gene module" , y = "Corr w/ distance to \n blood progenitors") +
scale_color_manual(values = cols_modules)
p = ggarrange(p1,p2,p3, ncol = 3)
p
ggsave(filename = paste0(figures.dir, "gene_modules/", "stat", ".png"), plot = p, width = 9, height = 3)
modules_wgcna$cluster = factor(modules_wgcna$cluster , levels = sort(1:unique(modules_wgcna$cluster)))
modules_wgcna = readRDS(paste0(root.dir , "data/processed/chimera_tal1/gene_modules_scwgcna.Rds"))
unique(modules_wgcna$cluster)
modules_wgcna$cluster = factor(modules_wgcna$cluster , levels = sort(unique(modules_wgcna$cluster)))
levels(modules_wgcna$cluster)
saveRDS(modules_wgcna  , file = paste0(root.dir , "data/processed/chimera_tal1/gene_modules_scwgcna.Rds"))
cluster = 1
genes = modules_wgcna$gene[modules_wgcna$cluster == cluster]
genes
?
plot_beeswarm_gene_set
head(de_stat)
genes = modules_wgcna$gene[modules_wgcna$cluster == cluster]
p = plot_beeswarm_gene_set(de_stat , genes = genes , nhoodGroup = "celltype")
p
nhoodGroup = "celltype"
de_stat_temp = convert_de_stat(de_stat , assay_names = NULL, coldata_names = nhoodGroup)
de_stat_temp = de_stat_temp[genes , ]
which(is.na(assay(de_stat_temp , "pval_corrected_across_nhoods")))
nhood_stat = as.data.frame(colData(de_stat_temp))
nhood_stat = nhood_stat[order(nhood_stat$Nhood) , ]
nhood_stat$avg_logFC = colMeans(assay(de_stat_temp , "logFC_corrected"))
nhood_stat$avg_logFC = colMeans(assay(de_stat_temp , "logFC"))
nhood_stat$frac_DE_genes = colMeans(assay(de_stat_temp , "pval_corrected_across_nhoods") < 0.1)
nhood_stat = mutate(nhood_stat, group_by = nhood_stat[,nhoodGroup])
nhood_stat
p = nhood_stat %>%
arrange(group_by) %>%
mutate(Nhood=factor(Nhood, levels=unique(Nhood))) %>%
ggplot(aes(group_by, frac_DE_genes, color=avg_logFC)) +
scale_color_gradient2(name = "Average logFC") +
#guides(color="none") +
xlab(nhoodGroup) + ylab("How often gene is DE") +
geom_quasirandom(alpha=1) +
coord_flip() +
theme_bw() +
theme(strip.text.y =  element_text(angle=0))
library(ggbeeswarm)
p = nhood_stat %>%
arrange(group_by) %>%
mutate(Nhood=factor(Nhood, levels=unique(Nhood))) %>%
ggplot(aes(group_by, frac_DE_genes, color=avg_logFC)) +
scale_color_gradient2(name = "Average logFC") +
#guides(color="none") +
xlab(nhoodGroup) + ylab("How often gene is DE") +
geom_quasirandom(alpha=1) +
coord_flip() +
theme_bw() +
theme(strip.text.y =  element_text(angle=0))
p
p = nhood_stat %>%
arrange(group_by) %>%
mutate(Nhood=factor(Nhood, levels=unique(Nhood))) %>%
ggplot(aes(group_by, frac_DE_genes, color=avg_logFC)) +
scale_color_gradient2(name = "Average logFC") +
#guides(color="none") +
xlab(nhoodGroup) + ylab("How often gene is DE") +
geom_quasirandom(alpha=1 ,size = 2) +
coord_flip() +
theme_bw() +
theme(strip.text.y =  element_text(angle=0))
p
p = nhood_stat %>%
arrange(group_by) %>%
mutate(Nhood=factor(Nhood, levels=unique(Nhood))) %>%
ggplot(aes(group_by, frac_DE_genes, color=avg_logFC)) +
scale_color_gradient2(name = "Average logFC") +
#guides(color="none") +
xlab(nhoodGroup) + ylab("How often gene is DE") +
geom_quasirandom(alpha=1 ,size = 4) +
coord_flip() +
theme_bw() +
theme(strip.text.y =  element_text(angle=0))
p
load_all9)
librayr(dev.control())
library(devtools)
library(usethis)
load_all()
devtools::install_github("MarioniLab/miloDE")
library(miloDE)
genes = modules_wgcna$gene[modules_wgcna$cluster == cluster]
p = plot_beeswarm_gene_set(de_stat , genes = genes , nhoodGroup = "celltype") +
p
genes = modules_wgcna$gene[modules_wgcna$cluster == cluster]
p = plot_beeswarm_gene_set(de_stat , genes = genes , nhoodGroup = "celltype")
p
genes = modules_wgcna$gene[modules_wgcna$cluster == cluster]
p = plot_beeswarm_gene_set(de_stat , genes = genes , nhoodGroup = "celltype" , size = 4)
devtools::install_github("MarioniLab/miloDE")
devtools::install_github("MarioniLab/miloDE" , force = T)
library(miloDE)
?plot_beeswarm_gene_set
?plot_beeswarm_gene_set
genes = modules_wgcna$gene[modules_wgcna$cluster == cluster]
p = plot_beeswarm_gene_set(de_stat , genes = genes , nhoodGroup = "celltype" , size = 4)
library(miloDE)
genes = modules_wgcna$gene[modules_wgcna$cluster == cluster]
p = plot_beeswarm_gene_set(de_stat , genes = genes , nhoodGroup = "celltype" , size = 4)
library(miloDE)
library(miloR)
library(BiocParallel)
library(SingleCellExperiment)
library(ggplot2)
library(ggpubr)
library(viridis)
ncores = 4
mcparam = MulticoreParam(workers = ncores)
register(mcparam)
set.seed(32)
#root.dir = "/nfs/research/marioni/alsu/hubmap_metaRef/"
root.dir = "/Users/alsu/Develop/hubmap_metaRef/"
figures.dir = paste0(root.dir , "figures/chimera_embryo/blood_progenitors/main/")
source(paste0(root.dir , "am_hubmapMetaRef/functions/core_functions.R"))
# specific to this script
#source(paste0(root.dir , "am_hubmapMetaRef/analysis/chimera_embryo/blood_progenitors/functions_4_blood_prog_analysis.R"))
# load sce with embedding
sce = readRDS(paste0(root.dir , "data/sces/mouse_embryo/chimera/mouse_embryo_chimera_tal_only.Rds"))
sce$celltype = sce$celltype.mapped
sce$tomato = sapply(sce$tomato , function(x) ifelse(isTRUE(x) , "Tal1-" , "Tal1+"))
sce$tomato = factor(sce$tomato , levels = c("Tal1+" , "Tal1-"))
# restrict to blood lineage celltypes
celltypes = c("Haematoendothelial progenitors" , "Endothelium" , paste("Blood progenitors" , c(1,2)) , paste0("Erythroid" , c(1:3)))
sce = sce[, sce$celltype %in% celltypes]
# retain informative (expressed) genes - saves memory/time
sce = geneBasisR::retain_informative_genes(sce)
# update symbols to be unique
rowdata = as.data.frame(rowData(sce))
tab = table(rowdata$SYMBOL)
genes_not_unq = names(tab)[tab > 1]
rowdata$SYMBOL_unq = rowdata$SYMBOL
idx = which(rowdata$SYMBOL_unq %in% genes_not_unq)
rowdata$SYMBOL_unq[idx] = paste0(rowdata$ENSEMBL[idx] , "_" , rowdata$SYMBOL[idx])
rownames(sce) = rowdata$SYMBOL_unq
celltypes = c("Endothelium" , "Haematoendothelial progenitors")
sce_milo = readRDS(paste0(root.dir , "data/processed/chimera_tal1/sce_milo_blood_lineage.Rds"))
add_distance_to_blood = function(sce , sce_milo){
cells_milo = sce$cell[sce$celltype %in% c( "Endothelium", "Haematoendothelial progenitors")]
cells_blood =  sce$cell[sce$celltype %in% c( "Blood progenitors 1", "Blood progenitors 2")]
pcs = reducedDim(sce[, sce$cell %in% c(cells_milo, cells_blood)] , "pca.corrected")
my_dist = as.matrix( dist(pcs) )
my_dist = my_dist[rownames(my_dist) %in% cells_milo , colnames(my_dist) %in% cells_blood]
rownames_my_dist = rownames(my_dist)
my_dist = sapply(1:nrow(my_dist) , function(i) return(min(my_dist[i , ])))
names(my_dist) = rownames_my_dist
nhoods_sce = nhoods(sce_milo)
stat = lapply(1:ncol(nhoods_sce) , function(i){
cells = rownames(nhoods_sce)[which(nhoods_sce[, i] == 1)]
out = data.frame(dist_2_blood = mean(my_dist[names(my_dist) %in% cells]))
return(out)
})
stat = do.call(rbind , stat)
stat$Nhood = 1:ncol(nhoods_sce)
return(stat)
}
dist_stat = add_distance_to_blood(sce , sce_milo)
add_da = function(sce_milo , reducedDim_name = "pca.corrected" , col_annotate){
require(dplyr)
require(miloR)
sce_milo <- countCells(sce_milo, meta.data = as.data.frame(colData(sce_milo)), samples="sample")
sce_design <- data.frame(colData(sce_milo))[,c("sample", "tomato")]
sce_design <- distinct(sce_design)
rownames(sce_design) <- sce_design$sample
nhoodCounts(sce_milo) = as.matrix(nhoodCounts(sce_milo) , "dgCMatrix")
da_results <- testNhoods(sce_milo, design = ~ factor(tomato), design.df = sce_design, fdr.weighting = "graph-overlap", reduced.dim = reducedDim_name)
if (!is.null(col_annotate)){
da_results = annotateNhoods(sce_milo, da_results, coldata_col = col_annotate)
}
da_results = da_results[order(da_results$Nhood) , ]
return(da_results)
}
da_stat = add_da(sce_milo , col_annotate = "celltype")
de_stat = de_test_neighbourhoods(sce_milo , design = ~tomato , covariates = "tomato" , min_n_cells_per_sample = 1 , BPPARAM = mcparam , output_type = "data.frame")
# add da_stat, dist_stat
de_stat = merge(de_stat , dist_stat , all.x = T , all.y = F)
da_stat = da_stat[, c("Nhood" , "logFC" , "PValue" , "SpatialFDR" , "celltype")]
colnames(da_stat) = c("Nhood" , "logFC_DA" , "PValue_DA" , "SpatialFDR_DA" , "celltype")
de_stat = merge(de_stat , da_stat , all.x= T , all.y = F)
library(dplyr)
# to calc corr, lets assign 0s instead of NaNs
de_stat$logFC[is.na(de_stat$logFC)] = 0
de_stat$pval[is.na(de_stat$pval)] = 1
de_stat$pval_corrected_across_genes[is.na(de_stat$pval_corrected_across_genes)] = 1
de_stat$pval_corrected_across_nhoods[is.na(de_stat$pval_corrected_across_nhoods)] = 1
de_stat_per_gene = as.data.frame(de_stat %>% group_by(gene) %>% dplyr::summarise(n_hoods_sig = sum(pval_corrected_across_nhoods < 0.1 , na.rm = T) , corr_w_dist = cor(logFC , dist_2_blood , method = "pearson")))
get_wgcna_modules = function(de_stat , de_stat_per_gene , n_hoods_sig.thresh = 2 ,
npcs = 5 ,
pval.thresh = 0.1 ){
require(scWGCNA)
require(Seurat)
require(dplyr)
require(reshape2)
set.seed(32)
# focus on genes that are DE in at least 2 nhoods
genes = de_stat_per_gene$gene[de_stat_per_gene$n_hoods_sig >= n_hoods_sig.thresh]
de_stat = de_stat[de_stat$gene %in% genes , ]
de_stat = de_stat[order(de_stat$Nhood) , ]
# for this analysis, set logFC to 0 and pvals to 1 if they are NaN
de_stat$logFC[is.na(de_stat$logFC)] = 0
de_stat$pval[is.na(de_stat$pval)] = 1
de_stat$pval_corrected_across_genes[is.na(de_stat$pval_corrected_across_genes)] = 1
de_stat$pval_corrected_across_nhoods[is.na(de_stat$pval_corrected_across_nhoods)] = 1
# set logFC to 0 if pval_corrected_across_nhoods > pval.thresh
de_stat$logFC[de_stat$pval_corrected_across_nhoods >= pval.thresh] = 0
# move the object to Seurat
de_stat = reshape2::dcast(data = de_stat, formula = gene~Nhood, value.var = "logFC")
rownames(de_stat) = de_stat$gene
de_stat = de_stat[,2:ncol(de_stat)]
obj.seurat <- CreateSeuratObject(counts = de_stat)
DefaultAssay(obj.seurat) <- "RNA"
obj.seurat = FindVariableFeatures(obj.seurat)
# scale
obj.seurat[["RNA"]]@scale.data = as.matrix(obj.seurat[["RNA"]]@data)
obj.seurat = Seurat::RunPCA(obj.seurat , npcs = npcs)
# run scwgcna
clusters_scwgcna = run.scWGCNA(p.cells = obj.seurat,
s.cells = obj.seurat,
is.pseudocell = F,
features = rownames(obj.seurat),
less = TRUE , merging = TRUE)
# compile stat
clusters = lapply(1:length(clusters_scwgcna$module.genes) , function(i){
out = data.frame(cluster = i , gene = clusters_scwgcna$module.genes[[i]] , n_genes = length(clusters_scwgcna$module.genes[[i]]))
return(out)
})
clusters = do.call(rbind , clusters)
# add colors
genes_w_colors = clusters_scwgcna$dynamicCols
genes_w_colors = data.frame(gene = names(genes_w_colors) , cluster_color = genes_w_colors)
clusters = merge(clusters , genes_w_colors)
return(clusters)
}
modules_wgcna = suppressMessages(get_wgcna_modules(de_stat, de_stat_per_gene , n_hoods_sig.thresh = 2))
# rearrange modules in the descending order
tab = sort(table(modules_wgcna$cluster) , decreasing = T)
tab = data.frame(cluster = c(1:length(tab)) , cluster_old = names(tab))
colnames(modules_wgcna)[colnames(modules_wgcna) == "cluster"] = "cluster_old"
modules_wgcna = merge(modules_wgcna , tab , all.x = T)
# add n-hoods-sig & corr-dist-2-blood
modules_wgcna = merge(modules_wgcna, de_stat_per_gene, by = "gene" , all.x = T , all.y = F)
modules_wgcna$cluster = factor(modules_wgcna$cluster , levels = sort(unique(modules_wgcna$cluster)))
genes_2_check = c("Tmem2" , "Cpa1" , "Tnnt2", "Raph1" , "Hsd11b2" , "Tnni1" , "Col1a2", "Ldhb" , "Bex1" , "Angpt2" , "Bex3" , "Myadm" ,
"Rgs5" , "Pdlim5", "Tceal9" , "Prnp", "Aard" , "Tubb2b" , "Klf2" , "Myl7", "Bmp5" , "Klf3" , "Gpx7", "Rragd" , "Pgam2" , "Creb3l1" , "Foxf1", "Tmem108" , "Irx3", "Spats1l" , "Timp2" ,
"Irx3" , "Mfge8" , "S100a6" , "Tdo2" , "Sgpp1" , "Gucy1b3" , "Map1b",  "Tagln" , "Cryab" , "Amph" , "Ankrd1" , "Meis2" , "Bmp2" ,
"Adrb2" , "Acta2" , "Ahnak" , "Cfc1")
table(modules_wgcna$cluster)
table(modules_wgcna$cluster[modules_wgcna$gene %in% genes_2_check])
n_hoods_total = ncol(nhoods(sce_milo))
cols_modules = MetBrewer::met.brewer("Homer2" , n = length(levels(modules_wgcna$cluster)))
tab = as.data.frame(table(modules_wgcna$cluster))
colnames(tab) = c("module" , "n_genes")
p1 = ggplot(tab , aes(x = factor(module) , y = n_genes , fill = factor(module))) +
geom_bar(stat = "identity" , position = "dodge") +
theme_bw() +
scale_fill_manual(values = cols_modules) +
theme(legend.position = "none") +
labs(x = "Gene module" , y = "Number of genes") +
theme(text = element_text(size = 14))
p2 = ggplot(modules_wgcna , aes(x = factor(cluster) , y = n_hoods_sig/n_hoods_total, col = factor(cluster) )) +
geom_boxplot() + geom_jitter(width = 0.1 , size = .75) +
theme_bw() +
theme(legend.position = "none") +
labs(x = "Gene module" , y = "Fraction of \n significant hoods") +
scale_color_manual(values = cols_modules) +
theme(text = element_text(size = 14))
p3 = ggplot(modules_wgcna , aes(x = factor(cluster) , y = corr_w_dist , col = factor(cluster) )) +
geom_boxplot() + geom_jitter(width = 0.1 , size = .75) +
theme_bw() +
theme(legend.position = "none") +
labs(x = "Gene module" , y = "Corr w/ distance to \n blood progenitors") +
scale_color_manual(values = cols_modules) +
theme(text = element_text(size = 14))
p = ggarrange(p1,p2,p3)
p
plots = lapply(sort(unique(modules_wgcna$cluster)) , function(cluster){
genes = modules_wgcna$gene[modules_wgcna$cluster == cluster]
p = plot_DE_gene_set(sce_milo , de_stat = de_stat , genes = genes , size_range = c(0.5 , 5)) +
scale_fill_gradient2(name = "avg logFC") + scale_size(range = c(0.5 , 5), name="Fraction of\nsignificantly\nDE genes") +
ggtitle(paste0("Module #" , cluster , ", ", length(genes), " genes"))
print(p)
#ggsave(filename = paste0(figures.dir, "gene_modules/spatial/", cluster, ".png"), plot = p, width = 5, height = 5)
})
modules_wgcna$cluster_name = paste0("Module #" , modules_wgcna$cluster)
modules_wgcna$cluster_name = factor(modules_wgcna$cluster_name , levels = paste0("Module #",levels(modules_wgcna$cluster)))
plots = lapply(levels(modules_wgcna$cluster_name) , function(cluster_name){
genes = modules_wgcna$gene[modules_wgcna$cluster_name == cluster_name]
p = plot_beeswarm_gene_set(de_stat , genes = genes , nhoodGroup = "celltype" , size = 3.5) +
scale_color_gradient2(breaks = c(-2,-1,0,1,2) , limits = c(-2.2,2.2) , name = "avg logFC") +
geom_quasirandom(alpha = 1 , size = 3.5 , shape = 1 , colour = "black") +
ylim(c(0,1)) +
labs(x = "",y = "") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
theme(axis.text.y = element_text(face="bold", colour = cols_ct, size=12)) +
ggtitle(cluster_name)
return(p)
})
library(ggbeeswarm)
modules_wgcna$cluster_name = paste0("Module #" , modules_wgcna$cluster)
modules_wgcna$cluster_name = factor(modules_wgcna$cluster_name , levels = paste0("Module #",levels(modules_wgcna$cluster)))
plots = lapply(levels(modules_wgcna$cluster_name) , function(cluster_name){
genes = modules_wgcna$gene[modules_wgcna$cluster_name == cluster_name]
p = plot_beeswarm_gene_set(de_stat , genes = genes , nhoodGroup = "celltype" , size = 3.5) +
scale_color_gradient2(breaks = c(-2,-1,0,1,2) , limits = c(-2.2,2.2) , name = "avg logFC") +
geom_quasirandom(alpha = 1 , size = 3.5 , shape = 1 , colour = "black") +
ylim(c(0,1)) +
labs(x = "",y = "") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
theme(axis.text.y = element_text(face="bold", colour = cols_ct, size=12)) +
ggtitle(cluster_name)
return(p)
})
cols_ct = c("#efc86e" , "aquamarine3")
names(cols_ct) = c("Endo" , "HPs")
plots = lapply(levels(modules_wgcna$cluster_name) , function(cluster_name){
genes = modules_wgcna$gene[modules_wgcna$cluster_name == cluster_name]
p = plot_beeswarm_gene_set(de_stat , genes = genes , nhoodGroup = "celltype" , size = 3.5) +
scale_color_gradient2(breaks = c(-2,-1,0,1,2) , limits = c(-2.2,2.2) , name = "avg logFC") +
geom_quasirandom(alpha = 1 , size = 3.5 , shape = 1 , colour = "black") +
ylim(c(0,1)) +
labs(x = "",y = "") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
theme(axis.text.y = element_text(face="bold", colour = cols_ct, size=12)) +
ggtitle(cluster_name)
return(p)
})
p = ggarrange(plotlist = plots , common.legend = T , nrow = 2 , ncol=4)
p
get_go_terms = function(genes , pval.thresh = 0.1){
require(enrichR)
require(stringr)
gos <- as.data.frame( enrichr(genes, 'GO_Biological_Process_2021')[[1]] )
gos$n_tested_genes = length(genes)
gos$n_detected_genes_in_go = NaN
gos$n_total_genes_in_go = NaN
gos$Term_id = NaN
for (i in 1:nrow(gos)){
current.overlap = gos$Overlap[i]
current.overlap = str_split(current.overlap, "/")
gos$n_detected_genes_in_go[i] = as.numeric(current.overlap[[1]][1])
gos$n_total_genes_in_go[i] = as.numeric(current.overlap[[1]][2])
current.go = gos$Term[i]
current.go = str_split(current.go, "GO:")
gos$Term[i] = substring(current.go[[1]][1], 1, nchar(current.go[[1]][1])-2)
gos$Term_id[i] = substring(current.go[[1]][2], 1, nchar(current.go[[1]][2])-1)
}
gos = gos[gos$Adjusted.P.value < pval.thresh, ]
return(gos)
}
plots = lapply(levels(modules_wgcna$cluster) , function(cluster){
print(cluster)
gos = get_go_terms(modules_wgcna$gene[modules_wgcna$cluster == cluster] )
#write.csv(gos, paste0(root.dir , "supp_tables/tal1/module_" , cluster , ".csv"), row.names=FALSE, quote=FALSE)
if (nrow(gos) > 0){
p = plotEnrich(gos , numChar = 80) +
ggtitle(cluster)
print(p)
}
})
genes_cluster_1_selected = c("Itga2b" , "Hmox1", "Rras" , "Npr1" , "Rhob" , "Ldb2" , "Dpysl3", "Bst2")
head(modules_wgcna)
genes_cluster_1_selected
modules_wgcna[modules_wgcna$gene %in% genes_cluster_1_selected , ]
genes_cluster_2_selected = c("Tnnt2" , "Tnni1" , "Bmp5" , "Nkx2-5" , "Fbn1" , "Myh7" , "Popdc2" , "Gata5" )
modules_wgcna[modules_wgcna$gene %in% genes_cluster_2_selected , ]
plots = lapply(levels(modules_wgcna$cluster_name) , function(cluster_name){
genes = modules_wgcna$gene[modules_wgcna$cluster_name == cluster_name]
p = plot_beeswarm_gene_set(de_stat , genes = genes , nhoodGroup = "celltype" , size = 3.5) +
scale_color_gradient2(breaks = c(-2,-1,0,1,2) , limits = c(-2.2,2.2) , name = "avg logFC") +
geom_quasirandom(alpha = 1 , size = 3.5 , shape = 1 , colour = "black") +
ylim(c(0,1)) +
labs(x = "",y = "") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
theme(axis.text.y = element_text(face="bold", colour = cols_ct, size=12)) +
ggtitle(cluster_name)
return(p)
})
p = ggarrange(plotlist = plots , common.legend = T , nrow = 2 , ncol=4)
p
ggsave(filename = paste0(figures.dir, "gene_modules/break_down_cts", ".png"), plot = p, width = 7, height = 4)
plots = lapply(sort(unique(modules_wgcna$cluster)) , function(cluster){
genes = modules_wgcna$gene[modules_wgcna$cluster == cluster]
p = plot_DE_gene_set(sce_milo , de_stat = de_stat , genes = genes , size_range = c(0.5 , 5)) +
scale_fill_gradient2(name = "avg logFC") + scale_size(range = c(0.5 , 5), name="Fraction of\nsignificantly\nDE genes") +
ggtitle(paste0("Module #" , cluster , ", ", length(genes), " genes"))
print(p)
ggsave(filename = paste0(figures.dir, "gene_modules/spatial/", cluster, ".png"), plot = p, width = 5, height = 5)
})
n_hoods_total = ncol(nhoods(sce_milo))
cols_modules = MetBrewer::met.brewer("Homer2" , n = length(levels(modules_wgcna$cluster)))
tab = as.data.frame(table(modules_wgcna$cluster))
colnames(tab) = c("module" , "n_genes")
p1 = ggplot(tab , aes(x = factor(module) , y = n_genes , fill = factor(module))) +
geom_bar(stat = "identity" , position = "dodge") +
theme_bw() +
scale_fill_manual(values = cols_modules) +
theme(legend.position = "none") +
labs(x = "Gene module" , y = "Number of genes") +
theme(text = element_text(size = 14))
p2 = ggplot(modules_wgcna , aes(x = factor(cluster) , y = n_hoods_sig/n_hoods_total, col = factor(cluster) )) +
geom_boxplot() + geom_jitter(width = 0.1 , size = .75) +
theme_bw() +
theme(legend.position = "none") +
labs(x = "Gene module" , y = "Fraction of \n significant hoods") +
scale_color_manual(values = cols_modules) +
theme(text = element_text(size = 14))
p3 = ggplot(modules_wgcna , aes(x = factor(cluster) , y = corr_w_dist , col = factor(cluster) )) +
geom_boxplot() + geom_jitter(width = 0.1 , size = .75) +
theme_bw() +
theme(legend.position = "none") +
labs(x = "Gene module" , y = "Corr w/ distance to \n blood progenitors") +
scale_color_manual(values = cols_modules) +
theme(text = element_text(size = 14))
p = ggarrange(p1,p2,p3)
p
ggsave(filename = paste0(figures.dir, "gene_modules/", "stat", ".png"), plot = p, width = 6, height = 5)
saveRDS(modules_wgcna  , file = paste0(root.dir , "data/processed/chimera_tal1/gene_modules_scwgcna.Rds"))
saveRDS(de_stat  , file = paste0(root.dir , "data/processed/chimera_tal1/de_stat_blood_lineage.Rds"))
