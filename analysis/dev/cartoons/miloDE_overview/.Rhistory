p = ggarrange(p1,p2)
p
p = ggplot(meta , aes(x = x , y = y , col = haem_subclust )) +
geom_point() +
theme_bw() +
scale_color_manual(values = haem_colours) +
ylim(c( 0 ,20)) +
theme(legend.position = "top")
p
unique(meta$stage)
p = ggplot(meta[meta$stage %in% c("E6.75" , "E7.0" , "E7.25" , "E7.5") , ] , aes(x = x , y = y , col = haem_subclust )) +
geom_point() +
theme_bw() +
scale_color_manual(values = haem_colours) +
ylim(c( 0 ,20)) +
theme(legend.position = "top")
p
p = ggplot(meta[meta$stage %in% c("E6.75" , "E7.0" , "E7.25" , "E7.5") , ] , aes(x = x , y = y , col = haem_subclust )) +
geom_point() +
theme_bw() +
scale_color_manual(values = haem_colours) +
ylim(c( 0 ,20)) +
theme(legend.position = "top")
p
p = ggplot(meta[meta$stage %in% c("E6.75" , "E7.0" , "E7.25" , "E7.5") , ] , aes(x = x , y = y , col = haem_subclust )) +
geom_point() +
theme_bw() +
scale_color_manual(values = haem_colours) +
ylim(c( 0 ,20)) +
theme(legend.position = "top")
p
p = ggplot(meta[meta$stage %in% c("E7.75" , "E8.0" , "E8.25" , "E8.5") , ] , aes(x = x , y = y , col = haem_subclust )) +
geom_point() +
theme_bw() +
scale_color_manual(values = haem_colours) +
ylim(c( 0 ,20)) +
theme(legend.position = "top")
p
plots = lapply( unique(meta$celltype), function(celltype){
p1 = ggplot(meta[meta$celltype == celltype , ] , aes(x = x , y = y , col = haem_subclust )) +
geom_point() +
theme_bw() +
ylim(c( 0 ,20)) +
ggtitle(celltype)
print(p1)
})
plots = lapply( unique(meta$celltype), function(celltype){
p1 = ggplot(meta[meta$celltype == celltype , ] , aes(x = x , y = y , col = haem_subclust )) +
geom_point() +
theme_bw() +
ylim(c( 0 ,20)) +
ggtitle(celltype) +
scale_color_manual(values = haem_colours)
print(p1)
})
plots = lapply( unique(meta$celltype), function(celltype){
p1 = ggplot(meta[meta$celltype == celltype , ] , aes(x = x , y = y , col = haem_subclust )) +
geom_point() +
theme_bw() +
ggtitle(celltype) +
scale_color_manual(values = haem_colours)
print(p1)
})
plots = lapply( unique(meta$celltype), function(celltype){
p1 = ggplot(current.meta , aes(x = x , y = y , col = haem_subclust )) +
geom_point() +
theme_bw() +
ggtitle(celltype) +
scale_color_manual(values = haem_colours[names(haem_colours) %in% unique(current.meta$haem_subclust)])
print(p1)
})
plots = lapply( unique(meta$celltype), function(celltype){
current.meta = meta[meta$celltype == celltype , ]
p1 = ggplot(current.meta , aes(x = x , y = y , col = haem_subclust )) +
geom_point() +
theme_bw() +
ggtitle(celltype) +
scale_color_manual(values = haem_colours[names(haem_colours) %in% unique(current.meta$haem_subclust)])
print(p1)
})
tab = as.data.frame(table(current.meta$haem_subclust))
celltype
celltype = "Erythroid1"
current.meta = meta[meta$celltype == celltype , ]
tab = as.data.frame(table(current.meta$haem_subclust))
tab
plots = lapply( unique(meta$celltype), function(celltype){
current.meta = meta[meta$celltype == celltype , ]
p1 = ggplot(current.meta , aes(x = x , y = y , col = haem_subclust )) +
geom_point() +
theme_bw() +
ggtitle(celltype) +
scale_color_manual(values = haem_colours[names(haem_colours) %in% unique(current.meta$haem_subclust)])
tab = as.data.frame(table(current.meta$haem_subclust))
colnames(tab) = c("haem_subclust" , "n")
p2 = ggplot(tab , aes(x = factor(haem_subclust) , y = n , fill = haem_subclust )) +
geom_point() +
theme_bw() +
ggtitle(celltype) +
scale_fill_manual(values = haem_colours[names(haem_colours) %in% unique(current.meta$haem_subclust)])
p = ggarrange(p1,p2, common.legend = T)
print(p)
})
plots = lapply( unique(meta$celltype), function(celltype){
current.meta = meta[meta$celltype == celltype , ]
p1 = ggplot(current.meta , aes(x = x , y = y , col = haem_subclust )) +
geom_point() +
theme_bw() +
ggtitle(celltype) +
scale_color_manual(values = haem_colours[names(haem_colours) %in% unique(current.meta$haem_subclust)])
tab = as.data.frame(table(current.meta$haem_subclust))
colnames(tab) = c("haem_subclust" , "n")
p2 = ggplot(tab , aes(x = factor(haem_subclust) , y = n , fill = haem_subclust )) +
geom_bar(stat = "identity" , position = "dodge") +
theme_bw() +
ggtitle(celltype) +
scale_fill_manual(values = haem_colours[names(haem_colours) %in% unique(current.meta$haem_subclust)])
p = ggarrange(p1,p2, common.legend = T)
print(p)
})
plots = lapply( unique(meta$celltype), function(celltype){
current.meta = meta[meta$celltype == celltype , ]
p1 = ggplot(current.meta , aes(x = x , y = y , col = haem_subclust )) +
geom_point() +
theme_bw() +
ggtitle(celltype) +
scale_color_manual(values = haem_colours[names(haem_colours) %in% unique(current.meta$haem_subclust)])
tab = as.data.frame(table(current.meta$haem_subclust))
colnames(tab) = c("haem_subclust" , "n")
p2 = ggplot(tab , aes(x = factor(haem_subclust) , y = n , fill = haem_subclust )) +
geom_bar(stat = "identity" , position = "dodge") +
theme_bw() +
ggtitle(celltype) +
scale_fill_manual(values = haem_colours[names(haem_colours) %in% unique(current.meta$haem_subclust)]) +theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
p = ggarrange(p1,p2, common.legend = T)
print(p)
})
table(meta$haem_subclust)
plots = lapply( unique(meta$haem_subclust), function(haem_subclust){
current.meta = meta[meta$haem_subclust == haem_subclust , ]
p1 = ggplot(current.meta , aes(x = x , y = y , col = celltype )) +
geom_point() +
theme_bw() +
ggtitle(celltype) +
scale_color_manual(values = EmbryoCelltypeColours[names(EmbryoCelltypeColours) %in% unique(current.meta$celltype)])
tab = as.data.frame(table(current.meta$celltype))
colnames(tab) = c("celltype" , "n")
p2 = ggplot(tab , aes(x = factor(celltype) , y = n , fill = celltype )) +
geom_bar(stat = "identity" , position = "dodge") +
theme_bw() +
ggtitle(celltype) +
scale_fill_manual(values = EmbryoCelltypeColours[names(EmbryoCelltypeColours) %in% unique(current.meta$celltype)]) +theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
p = ggarrange(p1,p2, common.legend = T)
print(p)
})
plots = lapply( unique(meta$haem_subclust), function(haem_subclust){
current.meta = meta[meta$haem_subclust == haem_subclust , ]
p1 = ggplot(current.meta , aes(x = x , y = y , col = celltype )) +
geom_point() +
theme_bw() +
ggtitle(haem_subclust) +
scale_color_manual(values = EmbryoCelltypeColours[names(EmbryoCelltypeColours) %in% unique(current.meta$celltype)])
tab = as.data.frame(table(current.meta$celltype))
colnames(tab) = c("celltype" , "n")
p2 = ggplot(tab , aes(x = factor(celltype) , y = n , fill = celltype )) +
geom_bar(stat = "identity" , position = "dodge") +
theme_bw() +
ggtitle(haem_subclust) +
scale_fill_manual(values = EmbryoCelltypeColours[names(EmbryoCelltypeColours) %in% unique(current.meta$celltype)]) +theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
p = ggarrange(p1,p2, common.legend = T)
print(p)
})
plots = lapply( sort(unique(meta$haem_subclust)), function(haem_subclust){
current.meta = meta[meta$haem_subclust == haem_subclust , ]
p1 = ggplot(current.meta , aes(x = x , y = y , col = celltype )) +
geom_point() +
theme_bw() +
ggtitle(haem_subclust) +
scale_color_manual(values = EmbryoCelltypeColours[names(EmbryoCelltypeColours) %in% unique(current.meta$celltype)])
tab = as.data.frame(table(current.meta$celltype))
colnames(tab) = c("celltype" , "n")
p2 = ggplot(tab , aes(x = factor(celltype) , y = n , fill = celltype )) +
geom_bar(stat = "identity" , position = "dodge") +
theme_bw() +
ggtitle(haem_subclust) +
scale_fill_manual(values = EmbryoCelltypeColours[names(EmbryoCelltypeColours) %in% unique(current.meta$celltype)]) +theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
p = ggarrange(p1,p2, common.legend = T)
print(p)
})
library(SingleCellExperiment)
library(miloR)
library(BiocParallel)
library(ggplot2)
library(ggpubr)
library(geneBasisR)
library(BiocSingular)
library(MouseGastrulationData)
library(scran)
library(viridis)
library(ggcorrplot)
library(cacoa)
library(igraph)
library(cowplot)
library(stringr)
ncores = 1
mcparam = MulticoreParam(workers = ncores)
register(mcparam)
set.seed(32)
#root.dir = "/nfs/research/marioni/alsu/hubmap_metaRef/"
root.dir = "/Users/alsu/Develop/hubmap_metaRef/"
figures.dir = paste0(root.dir , "figures/chimera_embryo/blood_progenitors/")
source(paste0(root.dir , "am_hubmapMetaRef/functions/core_functions.R"))
source(paste0(root.dir , "am_hubmapMetaRef/functions/milo_functions.R"))
# specific to this script
source(paste0(root.dir , "am_hubmapMetaRef/analysis/chimera_embryo/blood_progenitors/functions_4_blood_prog_analysis.R"))
# load sce with embedding
sce = readRDS(paste0(root.dir , "data/sces/mouse_embryo/chimera/mouse_embryo_chimera_tal_only.Rds"))
sce$celltype = sce$celltype.mapped
rowdata = as.data.frame(rowData(sce))
table(sce$celltype)
celltypes = c("Endothelium" , "Haematoendothelial progenitors")
sce_milo = assign_neighbourhoods(sce[, sce$celltype %in% celltypes,] , reducedDim.name = "pca.corrected" , k = 25, prop = 0.25 , order = 2, filtering = T)
lims = list()
lims[[1]] = c(-2,12)
lims[[2]] = c(-10,-1)
p = plot_umap_and_da(sce_milo , "UMAP" , lims = lims)
p
head(sce_milo)
meta_extended = read.csv( paste0(root.dir , "data/data_4_chimera_blood_prog_analysis/EMS80981-supplement-Sup_Table_5.csv") )
meta_extended = meta_extended[order(meta_extended$cell) , ]
sce_milo = sce_milo[, order(colnames(sce_milo))]
head(meta_extended)
meta_extended = read.csv( paste0(root.dir , "data/data_4_chimera_blood_prog_analysis/EMS80981-supplement-Sup_Table_5.csv") )
meta_extended = meta_extended[ , meta_extended$celltype.mapped %in% c("Endothelium" , "Haematoendothelial progenitors")]
meta_extended = read.csv( paste0(root.dir , "data/data_4_chimera_blood_prog_analysis/EMS80981-supplement-Sup_Table_5.csv") )
meta_extended = meta_extended[meta_extended$celltype.mapped %in% c("Endothelium" , "Haematoendothelial progenitors") , ]
meta_extended = meta_extended[order(meta_extended$cell) , ]
sce_milo = sce_milo[, order(colnames(sce_milo))]
sce_milo$haem_subclust = meta_extended$haem_subclust.mapped
sce_milo
umaps = cbind( as.data.frame(colData(sce_milo)) , as.data.frame(reducedDim(sce_milo , "UMAP")))
head(umaps)
p = ggplot(umaps , aes(x = umap_1 , y = umap_2 , col = haem_subclust)) +
geom_point() +
scale_color_manual(values = haem_colours[names(haem_colours) %in% unique(umaps$haem_subclust)]) +
theme_bw()
p
p = ggplot(umaps , aes(x = umap_1 , y = umap_2 , col = haem_subclust)) +
geom_point() +
scale_color_manual(values = haem_colours[names(haem_colours) %in% unique(umaps$haem_subclust)]) +
theme_bw() +
xlim(c(-2,7)) + ylim(c(-10 , 0))
p
sce_milo
de_bulk_haemo = get_de_genes_bulk(sce_milo , "Haematoendothelial progenitors")
de_bulk_endo = get_de_genes_bulk(sce_milo , "Endothelia")
table(sce_milo$celltype)
de_bulk_haemo = get_de_genes_bulk(sce_milo , "Haematoendothelial progenitors")
de_bulk_endo = get_de_genes_bulk(sce_milo , "Endothelium")
milo_de = de_test_all_hoods(sce_milo , genes = unique( de_bulk_haemo$ENSEMBL,de_bulk_endo$ENSEMBL )  , sample.id = "sample" , condition.id = "tomato")
colnames(milo_de_haemato)[colnames(milo_de_haemato) == "gene"] = "ENSEMBL"
milo_de_haemato = merge(milo_de_haemato , rowdata , all.x = T , all.y = F)
colnames(milo_de)[colnames(milo_de) == "gene"] = "ENSEMBL"
milo_de = merge(milo_de , rowdata , all.x = T , all.y = F)
# add da stat + hood annotation
da_stat = add_da(sce_milo , col_annotate = "celltype")
da_stat = da_stat[, c("Nhood" , "logFC" , "SpatialFDR" , "celltype" , "celltype_fraction")]
colnames(da_stat) = c("Nhood" , "logFC_DA" , "SpatialFDR_DA" , "celltype" , "celltype_fraction")
milo_de = merge(milo_de , da_stat , all.x = T , all.y = F)
## Add distance to blood
set.seed(32)
milo_de_stat = as.data.frame(milo_de %>% group_by(ENSEMBL , SYMBOL) %>% dplyr::summarise(n_hoods_sig = sum(SpatialFDR < 0.1) ))
milo_de_stat_lfc = as.data.frame(milo_de[ milo_de$SpatialFDR < 0.1, ] %>% group_by(ENSEMBL) %>% dplyr::summarise(logFC_milo = mean(logFC , na.rm = T) , logFC_milo_max = abs(max(logFC , na.rm = T))))
milo_de_stat = merge(milo_de_stat , milo_de_stat_lfc , all.x = T)
table(milo_de_stat$n_hoods_sig)
stat_scwgcna = get_scwgcna_stat(milo_de , milo_de_stat , n_hoods_sig = 3 , logFC.thresh = 0.25 , data_squash = "binary")
gene_clusters_scwgcna = get_scwgcna_clusters(stat_scwgcna , milo_de_stat )
dim(gene_clusters_scwgcna)
table(gene_clusters_scwgcna$cluster)
stat_scwgcna = get_scwgcna_stat(milo_de , milo_de_stat , n_hoods_sig = 3 , logFC.thresh = 0.5 , data_squash = "binary" , less = T)
stat_scwgcna = get_scwgcna_stat(milo_de , milo_de_stat , n_hoods_sig = 3 , logFC.thresh = 0.5 , data_squash = "binary")
gene_clusters_scwgcna = get_scwgcna_clusters(stat_scwgcna , milo_de_stat )
dim(gene_clusters_scwgcna)
table(gene_clusters_scwgcna$cluster)
genes_2_check = c("Tmem2" , "Cpa1" , "Tnnt2", "Raph1" , "Hsd11b2" , "Tnni1" , "Col1a2", "Ldhb" , "Bex1" , "Angpt2" , "Bex3" , "Myadm" ,
"Rgs5" , "Pdlim5", "Tceal9" , "Prnp", "Aard" , "Tubb2b" , "Klf2" , "Myl7", "Bmp5" , "Klf3" , "Gpx7", "Rragd" , "Pgam2" , "Creb3l1" , "Foxf1", "Tmem108" , "Irx3", "Spats1l" , "Timp2" ,
"Irx3" , "Mfge8" , "S100a6" , "Tdo2" , "Sgpp1" , "Gucy1b3" , "Map1b",  "Tagln" , "Cryab" , "Amph" , "Ankrd1" , "Meis2" , "Bmp2" ,
"Adrb2" , "Acta2" , "Ahnak" , "Cfc1")
table(gene_clusters_scwgcna$cluster[gene_clusters_scwgcna$SYMBOL %in% genes_2_check])
get_scwgcna_stat = function(milo_de , milo_de_stat_per_gene , n_hoods_sig = 3 , logFC.thresh = 0.5 , data_squash = "none" , less = F){
require(scWGCNA)
milo_seu = get_seurat_from_milo_de(milo_de , milo_de_stat_per_gene , n_hoods_sig = n_hoods_sig , logFC.thresh = logFC.thresh , data_squash = data_squash)
clusters_scwgcna = run.scWGCNA(p.cells = milo_seu, # Pseudocells (recommended), or Seurat single cells
s.cells = milo_seu, # single cells in Seurat format
is.pseudocell = F, # We are using single cells twice this time
features = rownames(milo_seu) , less = less)
return(clusters_scwgcna)
}
stat_scwgcna = get_scwgcna_stat(milo_de , milo_de_stat , n_hoods_sig = 3 , logFC.thresh = 0.5 , data_squash = "binary" , less = T)
gene_clusters_scwgcna = get_scwgcna_clusters(stat_scwgcna , milo_de_stat )
dim(gene_clusters_scwgcna)
table(gene_clusters_scwgcna$cluster)
genes_2_check = c("Tmem2" , "Cpa1" , "Tnnt2", "Raph1" , "Hsd11b2" , "Tnni1" , "Col1a2", "Ldhb" , "Bex1" , "Angpt2" , "Bex3" , "Myadm" ,
"Rgs5" , "Pdlim5", "Tceal9" , "Prnp", "Aard" , "Tubb2b" , "Klf2" , "Myl7", "Bmp5" , "Klf3" , "Gpx7", "Rragd" , "Pgam2" , "Creb3l1" , "Foxf1", "Tmem108" , "Irx3", "Spats1l" , "Timp2" ,
"Irx3" , "Mfge8" , "S100a6" , "Tdo2" , "Sgpp1" , "Gucy1b3" , "Map1b",  "Tagln" , "Cryab" , "Amph" , "Ankrd1" , "Meis2" , "Bmp2" ,
"Adrb2" , "Acta2" , "Ahnak" , "Cfc1")
table(gene_clusters_scwgcna$cluster[gene_clusters_scwgcna$SYMBOL %in% genes_2_check])
cluster_signatures_scwgcna = get_signatures(gene_clusters_scwgcna , milo_de)
cluster_signatures_scwgcna = merge(cluster_signatures_scwgcna , unique(gene_clusters_scwgcna[, c("cluster", "cluster_color")]) , all.x = T)
plots = lapply(sort(unique(cluster_signatures_scwgcna$cluster)) , function(cluster){
p = suppressWarnings( plot_signatures(cluster_signatures_scwgcna , cluster , sce_milo = sce_milo_haemo , da_stat = da_stat_haemo , gene_clusters = gene_clusters_scwgcna , size_range = c(0.25, 5)))
print(p)
})
plots = lapply(sort(unique(cluster_signatures_scwgcna$cluster)) , function(cluster){
p = suppressWarnings( plot_signatures(cluster_signatures_scwgcna , cluster , sce_milo = sce_milo , da_stat = da_stat , gene_clusters = gene_clusters_scwgcna , size_range = c(0.25, 5)))
print(p)
})
library(enrichR)
get_go_terms = function(genes){
gos <- as.data.frame( enrichr(genes, 'GO_Biological_Process_2021')[[1]] )
gos$n_tested_genes = length(genes)
gos$n_detected_genes_in_go = NaN
gos$n_total_genes_in_go = NaN
gos$Term_id = NaN
for (i in 1:nrow(gos)){
current.overlap = gos$Overlap[i]
current.overlap = str_split(current.overlap, "/")
gos$n_detected_genes_in_go[i] = as.numeric(current.overlap[[1]][1])
gos$n_total_genes_in_go[i] = as.numeric(current.overlap[[1]][2])
current.go = gos$Term[i]
current.go = str_split(current.go, "GO:")
gos$Term[i] = substring(current.go[[1]][1], 1, nchar(current.go[[1]][1])-2)
gos$Term_id[i] = substring(current.go[[1]][2], 1, nchar(current.go[[1]][2])-1)
}
#gos = gos[gos$n_detected_genes_in_go > 1  , ]
return(gos)
}
plots = lapply(sort(unique(gene_clusters_scwgcna$cluster)) , function(cluster){
gos = get_go_terms(gene_clusters_scwgcna$SYMBOL[gene_clusters_scwgcna$cluster == cluster] )
p = plotEnrich(gos[gos$Adjusted.P.value < 0.01 , ] , numChar = 80)
print(p)
})
plots = lapply(sort(unique(gene_clusters_scwgcna$cluster)) , function(cluster){
print(cluster)
gos = get_go_terms(gene_clusters_scwgcna$SYMBOL[gene_clusters_scwgcna$cluster == cluster] )
p = plotEnrich(gos[gos$Adjusted.P.value < 0.01 , ] , numChar = 80)
print(p)
})
cluster = 1
genes = gene_clusters_scwgcna$SYMBOL[gene_clusters_scwgcna$cluster == cluster]
genes
gos <- as.data.frame( enrichr(genes, 'GO_Biological_Process_2021')[[1]] )
gos$n_tested_genes = length(genes)
gos$n_detected_genes_in_go = NaN
gos$n_total_genes_in_go = NaN
gos
gos$Term_id = NaN
for (i in 1:nrow(gos)){
current.overlap = gos$Overlap[i]
current.overlap = str_split(current.overlap, "/")
gos$n_detected_genes_in_go[i] = as.numeric(current.overlap[[1]][1])
gos$n_total_genes_in_go[i] = as.numeric(current.overlap[[1]][2])
current.go = gos$Term[i]
current.go = str_split(current.go, "GO:")
gos$Term[i] = substring(current.go[[1]][1], 1, nchar(current.go[[1]][1])-2)
gos$Term_id[i] = substring(current.go[[1]][2], 1, nchar(current.go[[1]][2])-1)
}
gos
library(enrichR)
get_go_terms = function(genes){
gos <- as.data.frame( enrichr(genes, 'GO_Biological_Process_2021')[[1]] )
gos$n_tested_genes = length(genes)
gos$n_detected_genes_in_go = NaN
gos$n_total_genes_in_go = NaN
gos$Term_id = NaN
for (i in 1:nrow(gos)){
current.overlap = gos$Overlap[i]
current.overlap = str_split(current.overlap, "/")
gos$n_detected_genes_in_go[i] = as.numeric(current.overlap[[1]][1])
gos$n_total_genes_in_go[i] = as.numeric(current.overlap[[1]][2])
current.go = gos$Term[i]
current.go = str_split(current.go, "GO:")
gos$Term[i] = substring(current.go[[1]][1], 1, nchar(current.go[[1]][1])-2)
gos$Term_id[i] = substring(current.go[[1]][2], 1, nchar(current.go[[1]][2])-1)
}
gos = gos[gos$n_detected_genes_in_go > 1  , ]
return(gos)
}
cluster
gos = get_go_terms(gene_clusters_scwgcna$SYMBOL[gene_clusters_scwgcna$cluster == cluster] )
gos
p = plotEnrich(gos[gos$Adjusted.P.value < 0.01 , ] , numChar = 80)
class(gos)
gos[gos$Adjusted.P.value < 0.01 , ]
plots = lapply(sort(unique(gene_clusters_scwgcna$cluster)) , function(cluster){
print(cluster)
gos = get_go_terms(gene_clusters_scwgcna$SYMBOL[gene_clusters_scwgcna$cluster == cluster] )
p = plotEnrich(gos[gos$P.value < 0.01 , ] , numChar = 80)
print(p)
})
plots = lapply(sort(unique(gene_clusters_scwgcna$cluster)) , function(cluster){
print(cluster)
gos = get_go_terms(gene_clusters_scwgcna$SYMBOL[gene_clusters_scwgcna$cluster == cluster] )
gos = gos[gos$P.value < 0.01 , ]
if (nrow(gos) > 0){
p = plotEnrich(gos[gos$P.value < 0.01 , ] , numChar = 80)
print(p)
}
})
plots = lapply(sort(unique(cluster_signatures_scwgcna$cluster)) , function(cluster){
p = suppressWarnings( plot_signatures(cluster_signatures_scwgcna , cluster , sce_milo = sce_milo , da_stat = da_stat , gene_clusters = gene_clusters_scwgcna , size_range = c(0.25, 5)))
print(p)
})
plots = lapply(sort(unique(gene_clusters_scwgcna$cluster)) , function(cluster){
print(cluster)
gos = get_go_terms(gene_clusters_scwgcna$SYMBOL[gene_clusters_scwgcna$cluster == cluster] )
gos = gos[gos$P.value < 0.01 , ]
if (nrow(gos) > 0){
p = plotEnrich(gos[gos$P.value < 0.01 , ] , numChar = 80)
print(p)
}
})
plots = lapply(sort(unique(gene_clusters_scwgcna$cluster)) , function(cluster){
print(cluster)
gos = get_go_terms(gene_clusters_scwgcna$SYMBOL[gene_clusters_scwgcna$cluster == cluster] )
gos = gos[gos$P.value < 0.01 , ]
if (nrow(gos) > 0){
p = plotEnrich(gos[gos$P.value < 0.01 , ] , numChar = 80) +
ggtitle(cluster)
print(p)
}
})
da_stat_celltype = add_da(sce_milo , col_annotate = "celltype")
da_stat_haem_subclust = add_da(sce_milo , col_annotate = "haem_subclust")
head(da_stat_celltype)
da_stat_haem_subclust
da_stat = merge(da_stat_celltype[, c("Nhood" , "celltype" , "celltype_fraction")] ,
da_stat_haem_subclust[, c("Nhood" , "haem_subclust" , "haem_subclust_fraction")])
da_stat = da_stat[order(da_stat$Nhood) , ]
da_stat
dummy.da = da_stat
dummy.da = da_stat
colnames(dummy.da)[colnames(dummy.da) == "celltype"] = "NhoodGroup"
p1 = plotNhoodGroups(sce_milo , dummy.da , layout = "UMAP")
p1
dummy.da = da_stat
colnames(dummy.da)[colnames(dummy.da) == "celltype"] = "NhoodGroup"
p1 = plotNhoodGroups(sce_milo , dummy.da , layout = "UMAP") +
scale_fill_manual(values = EmbryoCelltypeColours[names(EmbryoCelltypeColours) %in% unique(dummy.da$NhoodGroup)])
p1
dummy.da = da_stat
colnames(dummy.da)[colnames(dummy.da) == "celltype"] = "NhoodGroup"
p1 = plotNhoodGroups(sce_milo , dummy.da , layout = "UMAP") +
scale_fill_manual(values = EmbryoCelltypeColours[names(EmbryoCelltypeColours) %in% unique(dummy.da$NhoodGroup)]) +
guides(width=FALSE ,edge_width=FALSE, size=FALSE)
p1
dummy.da
dummy.da = da_stat
colnames(dummy.da)[colnames(dummy.da) == "haem_subclust"] = "NhoodGroup"
p1 = plotNhoodGroups(sce_milo , dummy.da , layout = "UMAP") +
scale_fill_manual(values = haem_colours[names(haem_colours) %in% unique(dummy.da$NhoodGroup)]) +
guides(width=FALSE ,edge_width=FALSE, size=FALSE)
p1
table(da_stat$haem_subclust)
gene_clusters_scwgcna[gene_clusters_scwgcna$cluster == 1 , ]
?run.scWGCNA
get_scwgcna_stat = function(milo_de , milo_de_stat_per_gene , n_hoods_sig = 3 , logFC.thresh = 0.5 , data_squash = "none" , less = F){
require(scWGCNA)
milo_seu = get_seurat_from_milo_de(milo_de , milo_de_stat_per_gene , n_hoods_sig = n_hoods_sig , logFC.thresh = logFC.thresh , data_squash = data_squash)
clusters_scwgcna = run.scWGCNA(p.cells = milo_seu, # Pseudocells (recommended), or Seurat single cells
s.cells = milo_seu, # single cells in Seurat format
is.pseudocell = F, # We are using single cells twice this time
features = rownames(milo_seu) , less = less , merging = T)
return(clusters_scwgcna)
}
stat_scwgcna = get_scwgcna_stat(milo_de , milo_de_stat , n_hoods_sig = 3 , logFC.thresh = 0.5 , data_squash = "binary" , less = T)
library(scWGCNA)
?run.scWGCNA
devtools::install_github("cferegrino/scWGCNA", ref="main")
library(scWGCNA)
?run.scWGCNA
get_scwgcna_stat = function(milo_de , milo_de_stat_per_gene , n_hoods_sig = 3 , logFC.thresh = 0.5 , data_squash = "none" , less = F){
require(scWGCNA)
milo_seu = get_seurat_from_milo_de(milo_de , milo_de_stat_per_gene , n_hoods_sig = n_hoods_sig , logFC.thresh = logFC.thresh , data_squash = data_squash)
clusters_scwgcna = run.scWGCNA(p.cells = milo_seu, # Pseudocells (recommended), or Seurat single cells
s.cells = milo_seu, # single cells in Seurat format
is.pseudocell = F, # We are using single cells twice this time
features = rownames(milo_seu) , less = less , merging = T)
return(clusters_scwgcna)
}
set.seed(32)
stat_scwgcna = get_scwgcna_stat(milo_de , milo_de_stat , n_hoods_sig = 3 , logFC.thresh = 0.5 , data_squash = "binary" , less = T)
get_scwgcna_stat = function(milo_de , milo_de_stat_per_gene , n_hoods_sig = 3 , logFC.thresh = 0.5 , data_squash = "none" , less = F){
require(scWGCNA)
milo_seu = get_seurat_from_milo_de(milo_de , milo_de_stat_per_gene , n_hoods_sig = n_hoods_sig , logFC.thresh = logFC.thresh , data_squash = data_squash)
clusters_scwgcna = run.scWGCNA(p.cells = milo_seu, # Pseudocells (recommended), or Seurat single cells
s.cells = milo_seu, # single cells in Seurat format
is.pseudocell = F, # We are using single cells twice this time
features = rownames(milo_seu) , less = less , merging = T)
return(clusters_scwgcna)
}
?run.scWGCNA
get_scwgcna_stat = function(milo_de , milo_de_stat_per_gene , n_hoods_sig = 3 , logFC.thresh = 0.5 , data_squash = "none" , less = F){
require(scWGCNA)
milo_seu = get_seurat_from_milo_de(milo_de , milo_de_stat_per_gene , n_hoods_sig = n_hoods_sig , logFC.thresh = logFC.thresh , data_squash = data_squash)
clusters_scwgcna = run.scWGCNA(p.cells = milo_seu, # Pseudocells (recommended), or Seurat single cells
s.cells = milo_seu, # single cells in Seurat format
is.pseudocell = F, # We are using single cells twice this time
features = rownames(milo_seu) , less = less , merging = T)
return(clusters_scwgcna)
}
stat_scwgcna = get_scwgcna_stat(milo_de , milo_de_stat , n_hoods_sig = 3 , logFC.thresh = 0.5 , data_squash = "binary" , less = T)
